import tensorflow as tf
import ChangeFilter
import MYVGG16
import numpy as np


x = tf.placeholder("float", [None, 32, 32, 3])
y = tf.placeholder("float", [None, 10])
test_batch_size = 1000
FS_batch_size = 1
Result=[]

#########################################################################

A_1 = MYVGG16.wc1
A_2 = MYVGG16.wc2
A_3 = MYVGG16.wc3
A_4 = MYVGG16.wc4
A_5 = MYVGG16.wc5
A_6 = MYVGG16.wc6
A_7 = MYVGG16.wc7
##########################################################################
# ThiNet Filter Selection
index_1 = [23, 23, 37, 32, 25, 25, 9, 28, 18, 6, 27, 19, 23, 46, 41, 11, 15, 11, 17, 19, 27, 36, 6, 14, 12, 27, 13, 28, 21, 6, 27, 18, 31, 22, 4, 4, 10, 6, 22, 22, 12, 13, 13, 8, 3, 10, 6, 5, 13, 2, 4, 5, 1, 10, 9, 2, 7, 4, 5, 1, 3, 1, 0, 0]
index_2 = [38, 13, 18, 26, 15, 29, 31, 17, 38, 0, 47, 40, 11, 7, 12, 0, 15, 7, 21, 31, 5, 0, 7, 21, 9, 38, 21, 16, 4, 34, 5, 7, 4, 15, 26, 14, 4, 23, 4, 16, 3, 18, 1, 2, 9, 6, 14, 15, 9, 5, 9, 7, 0, 2, 7, 3, 7, 6, 1, 1, 3, 0, 0, 0]
index_3 = [1, 14, 27, 3, 90, 93, 26, 18, 0, 95, 15, 94, 49, 63, 60, 54, 34, 16, 70, 57, 64, 45, 63, 14, 16, 4, 7, 61, 17, 30, 28, 21, 44, 3, 61, 2, 39, 70, 45, 86, 38, 84, 47, 12, 15, 0, 51, 68, 24, 6, 14, 21, 25, 68, 69, 39, 20, 20, 55, 68, 35, 62, 42, 25, 32, 41, 22, 48, 46, 12, 15, 18, 23, 30, 23, 32, 24, 35, 38, 25, 42, 22, 9, 14, 35, 11, 25, 13, 38, 3, 14, 11, 14, 26, 24, 17, 30, 20, 0, 14, 10, 4, 21, 16, 21, 9, 12, 4, 11, 4, 12, 7, 12, 13, 8, 1, 0, 6, 3, 7, 5, 2, 0, 4, 2, 1, 0, 0]
index_4 = [9, 45, 96, 60, 65, 56, 59, 57, 86, 95, 13, 72, 100, 71, 85, 10, 74, 26, 67, 24, 72, 95, 7, 33, 67, 91, 64, 22, 92, 26, 21, 7, 39, 49, 2, 49, 62, 54, 63, 72, 25, 32, 26, 32, 79, 38, 5, 9, 40, 38, 13, 58, 36, 56, 13, 44, 59, 52, 20, 68, 8, 33, 35, 61, 4, 50, 38, 32, 4, 53, 3, 19, 46, 53, 18, 26, 20, 13, 21, 19, 15, 25, 39, 10, 24, 27, 9, 19, 14, 9, 10, 31, 25, 7, 31, 21, 23, 22, 29, 8, 27, 20, 11, 8, 14, 17, 7, 19, 19, 0, 10, 14, 15, 5, 8, 2, 6, 9, 2, 0, 4, 1, 5, 2, 2, 2, 0, 0]
index_5 = [1, 3, 6, 6, 12, 46, 86, 142, 167, 167, 174, 176, 219, 226, 83, 186, 192, 78, 143, 223, 148, 124, 126, 59, 153, 143, 27, 219, 119, 218, 24, 112, 93, 135, 204, 72, 190, 43, 103, 71, 54, 133, 107, 208, 148, 83, 4, 17, 14, 78, 88, 119, 138, 26, 166, 76, 173, 11, 167, 58, 179, 23, 2, 28, 18, 20, 95, 163, 181, 95, 25, 138, 117, 59, 106, 116, 173, 106, 108, 3, 53, 69, 126, 27, 25, 63, 161, 49, 2, 42, 6, 159, 43, 103, 161, 78, 28, 93, 108, 110, 89, 142, 130, 118, 94, 13, 41, 74, 103, 137, 66, 131, 98, 86, 128, 130, 35, 74, 60, 37, 69, 121, 59, 117, 66, 22, 17, 55, 100, 111, 100, 4, 117, 25, 60, 98, 50, 66, 55, 38, 38, 27, 75, 1, 59, 3, 5, 88, 55, 101, 61, 37, 18, 70, 71, 50, 75, 68, 47, 30, 60, 80, 59, 58, 88, 68, 57, 28, 23, 85, 81, 42, 37, 24, 50, 73, 55, 75, 59, 35, 65, 44, 73, 1, 49, 28, 22, 13, 13, 60, 42, 7, 18, 13, 42, 47, 8, 45, 38, 26, 35, 11, 39, 8, 38, 45, 46, 22, 8, 29, 6, 11, 17, 20, 3, 37, 28, 20, 25, 28, 27, 27, 14, 28, 9, 28, 15, 0, 21, 0, 24, 2, 8, 18, 16, 17, 18, 13, 5, 14, 10, 13, 9, 5, 11, 5, 9, 1, 7, 6, 1, 4, 3, 0, 0, 0]
index_6 = [114, 54, 6, 74, 26, 200, 235, 170, 189, 87, 3, 71, 193, 96, 14, 20, 54, 226, 120, 180, 207, 168, 136, 26, 99, 48, 179, 143, 223, 147, 215, 50, 143, 159, 17, 172, 219, 100, 182, 20, 73, 147, 161, 123, 182, 120, 63, 33, 195, 195, 155, 133, 193, 114, 34, 199, 125, 2, 118, 176, 105, 114, 35, 28, 183, 15, 166, 19, 92, 51, 148, 22, 49, 47, 148, 110, 60, 52, 47, 47, 46, 137, 98, 164, 83, 70, 2, 11, 29, 77, 147, 96, 148, 44, 154, 41, 56, 36, 22, 55, 16, 151, 142, 16, 67, 140, 77, 26, 106, 90, 32, 19, 79, 73, 38, 125, 66, 54, 24, 81, 22, 11, 28, 55, 123, 114, 128, 96, 95, 6, 112, 86, 95, 83, 101, 80, 36, 96, 84, 14, 53, 108, 36, 90, 52, 110, 77, 75, 36, 85, 94, 97, 31, 44, 20, 15, 28, 89, 75, 13, 48, 24, 53, 86, 19, 69, 6, 6, 75, 65, 31, 9, 62, 21, 15, 7, 9, 39, 39, 4, 69, 17, 43, 38, 58, 15, 53, 49, 56, 30, 33, 40, 28, 43, 11, 30, 55, 21, 54, 17, 55, 2, 49, 29, 30, 38, 6, 11, 20, 34, 29, 37, 13, 30, 39, 17, 28, 38, 12, 16, 18, 9, 23, 17, 20, 9, 27, 12, 10, 11, 14, 2, 2, 20, 10, 16, 12, 9, 15, 15, 0, 3, 6, 3, 8, 6, 2, 4, 0, 0, 4, 0, 1, 1, 1, 0]


# List of numbers of prune filters
# For First and Second Layer
#Prun_Num = [1,5,10,15,20,25,30,35,40,45,50,55,60]
# [70,80,90,100,110]
#Prun_Num = [160,170,180,190,200,210,220,230,240]
# For third and fourth layer
#Prun_Num = [1,5,10,15,20,25,30,35,40,45,50,55,60,64,70,80,90,100,110]

# For fifth layer
#Prun_Num = [1,10,20,30,40,50,60,70,80,90,100,110,120,130,140,150,160,170,180,190,200,210,220,230,240]
Prun_Num = [150]
##########################################################################
# For sixth layer
#Prun_Num = [1,10,20,30,40,50,60,70,80,90,100,110,120,130,140,150]
##########################################################################



#P_WC1 = A_1
#P_WC2 = A_2
#P_WC3 = A_3
#P_WC4 = A_4
#P_WC5 = A_5
#P_WC6 = A_6
#P_WC7 = A_7

# Filter selection
#m=1000 # the number of used image in filter selection process
#Q1, Q2, Q3, Q4, Q5, Q6 = MYVGG16.Net_Filter_Selection(m)
#print('Q1=',Q1)
#print('Q2=',Q2)
#print('Q3=',Q3)
#print('Q4=',Q4)
#print('Q5=',Q5)
#print('Q6=',Q6)
A = MYVGG16.wc6
B = MYVGG16.wc7
C = MYVGG16.bc6

for i in Prun_Num:
    P_WC1 = A
    P_WC2 = B
    P_BC1 = C
    for j in range(i):
        P_WC1 = np.delete(P_WC1, index_6[j], axis=3)
        P_WC2 = np.delete(P_WC2, index_6[j], axis=2)
        P_BC1 = np.delete(P_BC1, index_6[j], axis=0)
 #       print(j+1,"-------------> filter number", MIN_IND[j], "is pruned")
    test_acc = MYVGG16.TestNet(x,y,test_batch_size, P_WC1, P_WC2, P_BC1)
    Result.append(test_acc)
    print("Test Accuracy of the network for", str(i), "filter pruning layer is", test_acc)
    #print("Filter size is", P_WC1.shape)
    #print("Test Accuracy the original Network is", test_acc)
    #summary_writer = tf.summary.FileWriter('./Output', sess.graph)
print("Result =", Result)